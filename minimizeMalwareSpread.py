class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        n = len(graph)
        group_mapping = [-1 for i in range(n)]
        group_num = 0

        def dfs(group_num, node):
            if group_mapping[node] != -1:
                return 

            group_mapping[node] = group_num
            for nei in range(len(graph[node])):
                if nei == node or graph[node][nei] == 0:
                    continue
                dfs(group_num, nei)

        for i in range(n):
            if group_mapping[i] != -1:
                continue
            dfs(group_num, i)
            group_num += 1
        
        groups_size = [0 for i in range(group_num)]
        for i in range(n):
            groups_size[group_mapping[i]] += 1
            
        numInfected = [0 for i in range(group_num)]
        for i in range(len(initial)):
            numInfected[group_mapping[initial[i]]] += 1
        
        node_to_remove = -1
        maxSaved = 0
        affectedNodes = set(initial)
        for i in range(n):
            if i not in affectedNodes:
                continue

            if numInfected[group_mapping[i]] != 1:
                if node_to_remove == -1:
                    node_to_remove = i
                continue
            
            if groups_size[group_mapping[i]] > maxSaved:
                node_to_remove = i
                maxSaved = groups_size[group_mapping[i]] 
        return node_to_remove
            